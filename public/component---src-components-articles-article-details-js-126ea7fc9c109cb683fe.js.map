{"version":3,"file":"component---src-components-articles-article-details-js-126ea7fc9c109cb683fe.js","mappings":"oNA+HA,UA5FuB,YAAe,IAAZA,EAAW,EAAXA,KAElBC,EAAwB,oBAAXC,OAAyBA,OAAOC,SAASC,KAAKC,MAAM,QAAQ,GAAK,GAEpF,GAA4CC,EAAAA,EAAAA,UAAS,MAA9CC,EAAP,KAAuBC,EAAvB,KACIC,EAAYR,EAAIS,MAAMT,EAAIU,QAAQ,YAAc,GAEZ,MAApCF,EAAUA,EAAUG,OAAS,KAC/BH,EAAYA,EAAUC,MAAM,EAAGD,EAAUG,OAAS,IAGpD,IAAMC,EAAW,GACXC,EAAU,CAAC,GAEjBC,EAAAA,EAAAA,YAAU,WACRb,OAAOc,SAAS,EAAG,EACpB,GAAE,CAACP,KAEJM,EAAAA,EAAAA,YAAU,YACR,iBAAC,sFAEGf,EAAKiB,kBAAkBC,MAAMC,SAAQ,SAACC,EAAMC,GAGxB,aAFlBD,EAAOA,EAAKE,KAAKC,aAERC,KACPX,EAASY,KAAT,iBAAkBL,EAAlB,CAAwBC,MAAAA,KAExBP,EAAQM,EAAKM,QAAUN,CAE1B,IAEDP,EAASM,SAAQ,SAAAQ,GACfA,EAAQC,OAASd,EAAQa,EAAQD,OAClC,IAGGG,EAAU,CAAC,EACRC,EAAI,EAlBd,YAkBiBA,EAAIjB,EAASD,QAlB9B,oBAmBOC,EAASiB,GAAGC,KAAKrB,MAAM,MAAQD,EAnBtC,uBAoBKI,EAASiB,GAAT,KAAsB9B,EAAKiB,kBAAkBC,MAAML,EAASiB,GAAGT,OAAOC,KAAKU,KAE3EH,EAAO,SAAe,CAAChB,EAASiB,IAtBrC,4BAkBsCA,IAlBtC,uBA2BCtB,GAAkByB,EAAAA,EAAAA,IAAqBJ,IA3BxC,2CAAD,EA6BD,GAAE,CAACpB,IAQJ,OAAQF,EACN,gCACE,gBAAC,IAAD,CAAK2B,IAAG,iBACHC,EAAAA,EAAAA,eAAAA,IADG,CAENC,MAAM,cAAcC,EAAAA,EAAAA,IAAa9B,GACjC+B,OAAOC,EAAAA,EAAAA,IAAahC,GACpBN,IAAAA,MAEF,4BACE,gBAAC,IAAD,MACA,uBAAKuC,UAAU,aAAaC,MAAO,CAAC,gBAAkB,SAZE,iBAAlCF,EAAAA,EAAAA,IAAahC,IAAiCgC,EAAAA,EAAAA,IAAahC,IAAkBgC,EAAAA,EAAAA,IAAahC,GAAgBmC,SAY5F,QACpC,uBAAKF,UAAU,kBACb,uBAAKA,UAAU,OACb,qBAAGA,UAAU,YAAYpC,MAAMuC,EAAAA,EAAAA,IAAapC,IAC1C,uBACEqC,IAA8C,iBAAjCC,EAAAA,EAAAA,IAAYtC,IAAiCsC,EAAAA,EAAAA,IAAYtC,IAAkBsC,EAAAA,EAAAA,IAAYtC,GAAgBmC,QACpHI,IAAG,uBAAwBC,EAAAA,EAAAA,IAAWxC,MAG1C,uBAAKiC,UAAU,WACb,2BAAKH,EAAAA,EAAAA,IAAa9B,IAClB,0BAAIyC,EAAAA,EAAAA,IAAmBzC,IACvB,uBAAKiC,UAAU,iBACb,qBAAGA,UAAU,OAAOpC,MAAMuC,EAAAA,EAAAA,IAAapC,KAAkBwC,EAAAA,EAAAA,IAAWxC,IAAoB,2BACxF,qBAAGiC,UAAU,WAAWpC,MAAMuC,EAAAA,EAAAA,IAAapC,KAAkB0C,EAAAA,EAAAA,IAAe1C,OAIlF,gBAAC,IAAD,CAAUiC,UAAU,YAAWU,EAAAA,EAAAA,IAAgB3C,MAGnD,gBAAC,IAAD,OACI,IAET,C","sources":["webpack://asteria/./src/components/articles/articleDetails.js"],"sourcesContent":["//Import React dependencies\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Markdown from \"markdown-to-jsx\";\r\n\r\n//Importing constants\r\nimport _ from \"./../../constants/constants\";\r\n\r\n//Importing components\r\nimport SEO from \"./../seo\";\r\nimport Navbar from \"./../navbar\";\r\nimport Footer from \"./../footer\";\r\n\r\n//Importing helpers\r\nimport {\r\n  ArticleDescription, ArticleDetailsMapper, ArticleImage, ArticleMarkdown, ArticleSubject, ArticleTitle, \r\n  AuthorName, AuthorLinkTo, AuthorImage, AuthorPronouns, AuthorSchool\r\n} from './articleHelperFunctions';\r\n\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport \"./../../styles/index.scss\";\r\n\r\nconst subjects = {\r\n  '2BB760': `Biochem`,\r\n  '9C2111': `Physics & Technology`,\r\n  'BFAA34': `Econ &  Business`,\r\n  'C8792C': `Humanities`,\r\n  '622058': `Music`,\r\n  '376B70': `Art & Media`,\r\n  'AF70BD': `Literature & Philosophy`,\r\n  'CDCEED': `Politics & Philosophy`,\r\n  '3E5FCA': `Maths`,\r\n}\r\n\r\n\r\nconst ArticleDetails = ({ data }) => {\r\n\r\n  const url = typeof window !== 'undefined' ? window.location.href.split(/[?#]/)[0] : '';\r\n\r\n  const [ArticleDetails, setArticleDetails] = useState(null);\r\n  let articleId = url.slice(url.indexOf(\"articles\") + 9);\r\n\r\n  if (articleId[articleId.length - 1] === '/') {\r\n    articleId = articleId.slice(0, articleId.length - 1);\r\n  }\r\n\r\n  const articles = [];\r\n  const authors = {};\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [articleId]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      {\r\n        data.allMarkdownRemark.edges.forEach((info, index) => {\r\n          info = info.node.frontmatter;\r\n\r\n          if (info.type === \"Article\") {\r\n            articles.push({...info, index});\r\n          } else {\r\n            authors[info.userID] = info;\r\n          }\r\n        })\r\n\r\n        articles.forEach(article => {\r\n          article.author = authors[article.userID]\r\n        })\r\n      }\r\n\r\n      const Article = {};\r\n      for (let i = 0; i < articles.length; i++) {\r\n        if (articles[i].slug.slice(10) === articleId) {\r\n          articles[i][\"html\"] = data.allMarkdownRemark.edges[articles[i].index].node.html;\r\n\r\n          Article[\"articles\"] = [articles[i]];\r\n          break;\r\n        }\r\n      }\r\n\r\n      setArticleDetails(ArticleDetailsMapper(Article));\r\n    })();\r\n  }, [articleId]);\r\n\r\n  const changePage = () => {\r\n    window.localStorage.setItem('hash', ArticleSubject(ArticleDetails))\r\n  }\r\n\r\n  const image = () => (typeof(ArticleImage(ArticleDetails)) === \"string\") ? ArticleImage(ArticleDetails) : ArticleImage(ArticleDetails).default;\r\n\r\n  return (ArticleDetails ?\r\n    <>\r\n      <SEO seo={{\r\n        ..._.ArticleDetails.SEO,\r\n        title: `Asteria | ${ArticleTitle(ArticleDetails)}`,\r\n        image: ArticleImage(ArticleDetails),\r\n        url\r\n      }} />\r\n      <main>\r\n        <Navbar />\r\n        <div className=\"coverImage\" style={{'backgroundImage': `url('${image()}')`}}></div>\r\n        <div className=\"articleDetails\">\r\n          <div className=\"top\">\r\n            <a className=\"authorImg\" href={AuthorLinkTo(ArticleDetails)}>\r\n              <img \r\n                src={(typeof(AuthorImage(ArticleDetails)) === \"string\") ? AuthorImage(ArticleDetails) : AuthorImage(ArticleDetails).default} \r\n                alt={`Profile picture of ${AuthorName(ArticleDetails)}`}\r\n              ></img>\r\n            </a>\r\n            <div className=\"details\">\r\n              <h1>{ArticleTitle(ArticleDetails)}</h1> \r\n              <p>{ArticleDescription(ArticleDetails)}</p>\r\n              <div className=\"authorDetails\">\r\n                <a className=\"name\" href={AuthorLinkTo(ArticleDetails)}>{AuthorName(ArticleDetails)}</a><br />\r\n                <a className=\"pronouns\" href={AuthorLinkTo(ArticleDetails)}>{AuthorPronouns(ArticleDetails)}</a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Markdown className=\"content\">{ArticleMarkdown(ArticleDetails)}</Markdown>\r\n        </div>\r\n      </main>\r\n      <Footer />\r\n    </> : null\r\n  );\r\n};\r\n\r\nexport default ArticleDetails;\r\nexport const pageQuery = graphql`\r\n  query articleQuery1 {\r\n    allMarkdownRemark{\r\n      edges{\r\n        node{\r\n          html\r\n          frontmatter {\r\n            type\r\n            title\r\n            description\r\n            subject\r\n            issue\r\n            slug\r\n            preview_image\r\n            first_name\r\n            surname\r\n            pronouns\r\n            school\r\n            profile_picture\r\n            userID\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n\r\n\r\n/*\r\n<main>\r\n        <Navbar />\r\n        <div className=\"articleDetails\">\r\n          <a className={`subject-hover bg${ArticleSubject(ArticleDetails)}-light`} href={`/categories`} onClick={changePage}>\r\n            <p>{`${subjects[ArticleSubject(ArticleDetails)]}`}</p>\r\n          </a>\r\n\r\n          <div className=\"top\">\r\n            <img \r\n              src={(typeof(ArticleImage(ArticleDetails)) === \"string\") ? ArticleImage(ArticleDetails) : ArticleImage(ArticleDetails).default} \r\n              alt={`Cover image of ${ArticleTitle(ArticleDetails)}`}>\r\n            </img>\r\n            <div className=\"details\">\r\n              <h1>{ArticleTitle(ArticleDetails)}</h1> \r\n              <p>{ArticleDescription(ArticleDetails)}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <a href={AuthorLinkTo(ArticleDetails)} className=\"author\">\r\n            <div className=\"authorDetails\">\r\n              <h3>{AuthorName(ArticleDetails)}</h3>\r\n              <i>{AuthorPronouns(ArticleDetails)}</i>\r\n              <p>{AuthorSchool(ArticleDetails)}</p>\r\n            </div>\r\n            <div className=\"authorImg\">\r\n              <img \r\n              src={(typeof(AuthorImage(ArticleDetails)) === \"string\") ? AuthorImage(ArticleDetails) : AuthorImage(ArticleDetails).default} \r\n              alt={`Profile picture of ${AuthorName(ArticleDetails)}`}>\r\n            </img>\r\n            </div>\r\n          </a>\r\n\r\n          <Markdown className=\"content\">{ArticleMarkdown(ArticleDetails)}</Markdown>\r\n        </div>\r\n      </main>\r\n      */"],"names":["data","url","window","location","href","split","useState","ArticleDetails","setArticleDetails","articleId","slice","indexOf","length","articles","authors","useEffect","scrollTo","allMarkdownRemark","edges","forEach","info","index","node","frontmatter","type","push","userID","article","author","Article","i","slug","html","ArticleDetailsMapper","seo","_","title","ArticleTitle","image","ArticleImage","className","style","default","AuthorLinkTo","src","AuthorImage","alt","AuthorName","ArticleDescription","AuthorPronouns","ArticleMarkdown"],"sourceRoot":""}